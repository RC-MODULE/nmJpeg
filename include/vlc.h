//******************************************************************/
//*                     RC Module Inc., Moscow, Russia             */
//*                     NeuroMatrix(r) NM6403 Software             */
//*                                                                */
//*   VLC Library                                                  */
//*   (C-callable functions)                                       */
//*                                                                */
//*   File:             VLC.h                                      */
//*   Contents:         Descriptin of Variable Length Coding       */
//*                     routines.                                  */
//*                                                                */
//*   Software design:  S.Landyshev                                */
//*                                                                */
//*   Version           1.1                                        */
//*   Start date:       -09.09.2001                                */
//*   $Revision: 1.1 $    $Date: 2005/02/10 12:36:37 $                  */
//******************************************************************/
#ifndef _SVLC_INCLUDED_
#define _SVLC_INCLUDED_

#ifdef __cplusplus
		extern "C" {
#endif
//*****************************************************************************

	/**
    *
    * \if Russian
    *     \defgroup sVLC Кодирование кодами переменной длины
    * \endif
    * \if English
    *     \defgroup sVLC Variable Length Coding
    * \endif
    * \ingroup signal
	*/

//*****************************************************************************

//-------------------------------------------------------------------
    /**
    \defgroup VLC_Compress VLC_Compress
	\ingroup sVLC
	    \brief
        \ru
        \en C/C++ callable version of function VLC_Compress_core.

			\~
			\param pnSrc
				\ru Указатель на входной массив, содержащий кодовые слова. 
                    Каждое кодовое слово имеет разрядность 32 бита и содержит в 
                    себе код и длину кода. Кодовое слова состоит из двух частей:
                        1. Длина кода (0..4 биты).
                        2. Код (5..32 бита). 
                    Код в кодовом слове выравнивается по левой границе (примыкает к 
                    старшему разряду). Максимально возможная длина кода в одном кодовом 
                    слове составляет 32 - 5 = 27 битов.
                    Например: Кодовое слово = A6000007h = 1010-0110-0000-0111b.
                      Длина кода = 7 битов. Код = 1010011b.
				\en Input data.
			\param nCodes
				\ru Количество кодов (размер входного массива в 32-х разрядных словах). 
				\en Quantity of codes.
			\param nOffs
				\ru Смещение начала результирующего битового потока в pDst в битах.
                    Параметр может принимать значение от 0 до 63.
                    Новый битовый поток накладывается на старый.
                    С помощью этого параметра можно осуществить конкатенацию 
                    получаемого битового потока с уже существующим битовым потоком. 
				\en Bit offset of compressed data in pDst.
			\retval pDst
				\ru Результат (сжатые коды).
                    Массив pDst должен располагаться по чётному адресу.
				\en Compressed codes.
    \return \e 
        \ru Функция возвращает количество упакованных битов 
        \en Function return a quantity of packed bits.

	\note
		\ru
            Функция собирает коды, расположенные в 32-х битовых словах, 
            в выходной массив. Коды последовательно размещаются один за 
            другим в соответствии с их длинами. Коды укладываются в байты, причём
            каждый код примыкает к старшему биту в байте. 
            Например, пусть имеются следующие коды:
                1. 1010000b     кодовое слово = a0000007h;
                2. 1111001010b  кодовое слово = f280000ah;
                3. 111000b      кодовое слово = e0000006h;
                3. 000b         кодовое слово = 00000003h;
                4. 11001b       кодовое слово = c8000005h;
                5. 0100b        кодовое слово = 40000004h;
                6. 1110110b     кодовое слово = ec000007h;
                
            В результате получаем следующий битовый поток:
            / байт 0 \/ байт 1 \/ байт 2 \ / байт 3 \
             10100001  11100101  01110000   00110010

            / байт 4 \/ байт 5 \/ байт 6 \ / байт 7 \
             10011101  10000000  00000000   00000000

            64-битовое слово: 0000809d3270e5a1h.
            
            Функция выравнивает выходной поток до границы чётного адреса. 
            Оставшиеся биты заполняются нулями.

            Функцию можно применять для формирования битовых потоков 
            JPEG, MPEG, H.263 и других.

		\en Input data format (each element in 32-bit word):
				bits 0..4 - length of code, bits 5..32 - codes;

    \par
    \xmlonly
        <testperf> 
             <param> pnSrc </param> <values> L G </values>
             <param> pDst </param> <values> L G </values>
             <param> nCodes </param> <values> 8 128 1024 10240 </values>
             <param> nOffs </param> <values> 0 8 63 </values>
						 <size> 1 </size>
        </testperf>
    \endxmlonly
    */
    //! \{
int VLC_Compress(unsigned int *pnSrc, nm64u *pDst, int nCodes, int nOffs);
int VLC_Compress2(unsigned int *pnSrc, nm64u *pDst, int nCodes, int nOffs);
    //! \}
//-------------------------------------------------------------------

#ifdef __cplusplus
};
#endif
#endif // _SVLC_INCLUDED_




















